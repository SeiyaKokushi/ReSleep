package greendao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Memo;
import greendao.Heart;
import greendao.User;
import greendao.Graph;
import greendao.Recommend;
import greendao.Sensor;
import greendao.DataFlag;
import greendao.Stanford;
import greendao.DecideAction;

import greendao.MemoDao;
import greendao.HeartDao;
import greendao.UserDao;
import greendao.GraphDao;
import greendao.RecommendDao;
import greendao.SensorDao;
import greendao.DataFlagDao;
import greendao.StanfordDao;
import greendao.DecideActionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig memoDaoConfig;
    private final DaoConfig heartDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig graphDaoConfig;
    private final DaoConfig recommendDaoConfig;
    private final DaoConfig sensorDaoConfig;
    private final DaoConfig dataFlagDaoConfig;
    private final DaoConfig stanfordDaoConfig;
    private final DaoConfig decideActionDaoConfig;

    private final MemoDao memoDao;
    private final HeartDao heartDao;
    private final UserDao userDao;
    private final GraphDao graphDao;
    private final RecommendDao recommendDao;
    private final SensorDao sensorDao;
    private final DataFlagDao dataFlagDao;
    private final StanfordDao stanfordDao;
    private final DecideActionDao decideActionDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        memoDaoConfig = daoConfigMap.get(MemoDao.class).clone();
        memoDaoConfig.initIdentityScope(type);

        heartDaoConfig = daoConfigMap.get(HeartDao.class).clone();
        heartDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        graphDaoConfig = daoConfigMap.get(GraphDao.class).clone();
        graphDaoConfig.initIdentityScope(type);

        recommendDaoConfig = daoConfigMap.get(RecommendDao.class).clone();
        recommendDaoConfig.initIdentityScope(type);

        sensorDaoConfig = daoConfigMap.get(SensorDao.class).clone();
        sensorDaoConfig.initIdentityScope(type);

        dataFlagDaoConfig = daoConfigMap.get(DataFlagDao.class).clone();
        dataFlagDaoConfig.initIdentityScope(type);

        stanfordDaoConfig = daoConfigMap.get(StanfordDao.class).clone();
        stanfordDaoConfig.initIdentityScope(type);

        decideActionDaoConfig = daoConfigMap.get(DecideActionDao.class).clone();
        decideActionDaoConfig.initIdentityScope(type);

        memoDao = new MemoDao(memoDaoConfig, this);
        heartDao = new HeartDao(heartDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        graphDao = new GraphDao(graphDaoConfig, this);
        recommendDao = new RecommendDao(recommendDaoConfig, this);
        sensorDao = new SensorDao(sensorDaoConfig, this);
        dataFlagDao = new DataFlagDao(dataFlagDaoConfig, this);
        stanfordDao = new StanfordDao(stanfordDaoConfig, this);
        decideActionDao = new DecideActionDao(decideActionDaoConfig, this);

        registerDao(Memo.class, memoDao);
        registerDao(Heart.class, heartDao);
        registerDao(User.class, userDao);
        registerDao(Graph.class, graphDao);
        registerDao(Recommend.class, recommendDao);
        registerDao(Sensor.class, sensorDao);
        registerDao(DataFlag.class, dataFlagDao);
        registerDao(Stanford.class, stanfordDao);
        registerDao(DecideAction.class, decideActionDao);
    }
    
    public void clear() {
        memoDaoConfig.getIdentityScope().clear();
        heartDaoConfig.getIdentityScope().clear();
        userDaoConfig.getIdentityScope().clear();
        graphDaoConfig.getIdentityScope().clear();
        recommendDaoConfig.getIdentityScope().clear();
        sensorDaoConfig.getIdentityScope().clear();
        dataFlagDaoConfig.getIdentityScope().clear();
        stanfordDaoConfig.getIdentityScope().clear();
        decideActionDaoConfig.getIdentityScope().clear();
    }

    public MemoDao getMemoDao() {
        return memoDao;
    }

    public HeartDao getHeartDao() {
        return heartDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public GraphDao getGraphDao() {
        return graphDao;
    }

    public RecommendDao getRecommendDao() {
        return recommendDao;
    }

    public SensorDao getSensorDao() {
        return sensorDao;
    }

    public DataFlagDao getDataFlagDao() {
        return dataFlagDao;
    }

    public StanfordDao getStanfordDao() {
        return stanfordDao;
    }

    public DecideActionDao getDecideActionDao() {
        return decideActionDao;
    }

}
